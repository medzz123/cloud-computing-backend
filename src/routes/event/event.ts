import { Request, Response } from 'express';

import { db } from '../../db';
import { CustomRequest } from '../../typings/request';
import { nanoid, tinyid } from '../../utils/uid';
import { AddEmailsBody, CreateEventBody } from './event.models';

const USER_ID = 'FTdPkCzvCONxHShgR9Dl';

const getEvent = async (req: Request, res: Response) => {
  const { eventId } = req.params;

  if (!eventId) {
    res.status(400).send('Event Id os required');
  }

  try {
    const ref = db
      .collection('users')
      .doc(USER_ID)
      .collection('events')
      .doc(eventId);

    const eventSnapshot = await ref.get();

    const eventData = eventSnapshot.data();

    const responseData = {
      ...eventData,
      attendees: [],
    };

    const attendeesSnapshot = await ref.collection('attendees').get();

    const data = [];

    attendeesSnapshot.forEach((attendee) => {
      data.push(attendee.data());
    });

    responseData.attendees = data;

    res.send(responseData);
  } catch (err) {
    console.log('Error getting an event', err);
    res.status(500).send('Internal Server Error');
  }
};

export const createEvent = async (
  req: CustomRequest<CreateEventBody>,
  res: Response
) => {
  const { name, location, emails } = req.body;

  const attendees = emails.map((email) => ({
    attending: false,
    email,
    replied: false,
    token: nanoid(),
  }));

  const userRef = db.collection('users').doc(USER_ID);

  try {
    const autoGeneratedId = `${name.toLowerCase()}-${tinyid()}`;
    await userRef.collection('events').doc(autoGeneratedId).set({
      name,
      location,
      id: autoGeneratedId,
    });

    const eventRef = userRef.collection('events').doc(autoGeneratedId);

    await db.runTransaction(async (t) => {
      attendees.forEach((person) => {
        const attendeesRef = eventRef.collection('attendees').doc(person.token);
        t.create(attendeesRef, person);
      });
    });

    res.status(201).send('Created a new event!');
  } catch (err) {
    console.log('Failed on creating a new event', err);
    res.status(500).send('Internal Server Error');
  }
};

export const addEmails = async (
  req: CustomRequest<AddEmailsBody>,
  res: Response
) => {
  const { emails, id } = req.body;

  const attendees = emails.map((email) => ({
    attending: false,
    email,
    replied: false,
    token: nanoid(),
  }));

  const userRef = db.collection('users').doc(USER_ID);

  try {
    const eventRef = userRef.collection('events').doc(id);

    await db.runTransaction(async (t) => {
      attendees.forEach((person) => {
        const attendeesRef = eventRef.collection('attendees').doc(person.token);
        t.create(attendeesRef, person);
      });
    });

    res.status(201).send('Created a new event!');
  } catch (err) {
    console.log('Failed on creating a new event', err);
    res.status(500).send('Internal Server Error');
  }
};

export { getEvent };
